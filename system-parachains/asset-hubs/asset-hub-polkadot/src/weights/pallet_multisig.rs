
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-02-10, STEPS: `50`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Olivers-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// target/release/frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=/Users/vados/Documents/work/runtimes/target/release/wbuild/asset-hub-polkadot-runtime/asset_hub_polkadot_runtime.wasm
// --pallet
// pallet-multisig
// --extrinsic
// 
// --steps
// 50
// --repeat
// 2
// --output=/Users/vados/Documents/work/runtimes/system-parachains/asset-hubs/asset-hub-polkadot/src/weights/pallet_multisig.rs
// --snapshot-path=/Users/vados/Documents/work/runtimes/ah-polkadot.snap

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_287_178, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 142
			.saturating_add(Weight::from_parts(508, 0).saturating_mul(z.into()))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(_s: u32, _z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2614`
		//  Estimated: `6811`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(58_502_921, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, _z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892`
		//  Estimated: `6811`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(30_371_215, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 25_137
			.saturating_add(Weight::from_parts(95_580, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2736 + s * (32 Â±0)`
		//  Estimated: `6811`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(46_027_601, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 22_329
			.saturating_add(Weight::from_parts(74_914, 0).saturating_mul(s.into()))
			// Standard Error: 218
			.saturating_add(Weight::from_parts(290, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2614`
		//  Estimated: `6811`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(37_009_387, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 56_596
			.saturating_add(Weight::from_parts(248_247, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892`
		//  Estimated: `6811`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(17_434_285, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 18_856
			.saturating_add(Weight::from_parts(125_798, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2799`
		//  Estimated: `6811`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(36_677_959, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 27_466
			.saturating_add(Weight::from_parts(82_196, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
